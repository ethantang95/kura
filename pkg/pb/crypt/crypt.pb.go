// Code generated by protoc-gen-go. DO NOT EDIT.
// source: crypt.proto

package crypt

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EncryptionRequest struct {
	Plaintext            []byte   `protobuf:"bytes,1,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
	AesKey               []byte   `protobuf:"bytes,2,opt,name=aes_key,json=aesKey,proto3" json:"aes_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EncryptionRequest) Reset()         { *m = EncryptionRequest{} }
func (m *EncryptionRequest) String() string { return proto.CompactTextString(m) }
func (*EncryptionRequest) ProtoMessage()    {}
func (*EncryptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_crypt_072e351eb4757ad3, []int{0}
}
func (m *EncryptionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EncryptionRequest.Unmarshal(m, b)
}
func (m *EncryptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EncryptionRequest.Marshal(b, m, deterministic)
}
func (dst *EncryptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptionRequest.Merge(dst, src)
}
func (m *EncryptionRequest) XXX_Size() int {
	return xxx_messageInfo_EncryptionRequest.Size(m)
}
func (m *EncryptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptionRequest proto.InternalMessageInfo

func (m *EncryptionRequest) GetPlaintext() []byte {
	if m != nil {
		return m.Plaintext
	}
	return nil
}

func (m *EncryptionRequest) GetAesKey() []byte {
	if m != nil {
		return m.AesKey
	}
	return nil
}

type EncryptionResponse struct {
	Ciphertext           []byte   `protobuf:"bytes,1,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EncryptionResponse) Reset()         { *m = EncryptionResponse{} }
func (m *EncryptionResponse) String() string { return proto.CompactTextString(m) }
func (*EncryptionResponse) ProtoMessage()    {}
func (*EncryptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_crypt_072e351eb4757ad3, []int{1}
}
func (m *EncryptionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EncryptionResponse.Unmarshal(m, b)
}
func (m *EncryptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EncryptionResponse.Marshal(b, m, deterministic)
}
func (dst *EncryptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptionResponse.Merge(dst, src)
}
func (m *EncryptionResponse) XXX_Size() int {
	return xxx_messageInfo_EncryptionResponse.Size(m)
}
func (m *EncryptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptionResponse proto.InternalMessageInfo

func (m *EncryptionResponse) GetCiphertext() []byte {
	if m != nil {
		return m.Ciphertext
	}
	return nil
}

type DecryptionRequest struct {
	Ciphertext           []byte   `protobuf:"bytes,1,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	AesKey               []byte   `protobuf:"bytes,2,opt,name=aes_key,json=aesKey,proto3" json:"aes_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DecryptionRequest) Reset()         { *m = DecryptionRequest{} }
func (m *DecryptionRequest) String() string { return proto.CompactTextString(m) }
func (*DecryptionRequest) ProtoMessage()    {}
func (*DecryptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_crypt_072e351eb4757ad3, []int{2}
}
func (m *DecryptionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DecryptionRequest.Unmarshal(m, b)
}
func (m *DecryptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DecryptionRequest.Marshal(b, m, deterministic)
}
func (dst *DecryptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecryptionRequest.Merge(dst, src)
}
func (m *DecryptionRequest) XXX_Size() int {
	return xxx_messageInfo_DecryptionRequest.Size(m)
}
func (m *DecryptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DecryptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DecryptionRequest proto.InternalMessageInfo

func (m *DecryptionRequest) GetCiphertext() []byte {
	if m != nil {
		return m.Ciphertext
	}
	return nil
}

func (m *DecryptionRequest) GetAesKey() []byte {
	if m != nil {
		return m.AesKey
	}
	return nil
}

type DecryptionResponse struct {
	Plaintext            []byte   `protobuf:"bytes,1,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DecryptionResponse) Reset()         { *m = DecryptionResponse{} }
func (m *DecryptionResponse) String() string { return proto.CompactTextString(m) }
func (*DecryptionResponse) ProtoMessage()    {}
func (*DecryptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_crypt_072e351eb4757ad3, []int{3}
}
func (m *DecryptionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DecryptionResponse.Unmarshal(m, b)
}
func (m *DecryptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DecryptionResponse.Marshal(b, m, deterministic)
}
func (dst *DecryptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecryptionResponse.Merge(dst, src)
}
func (m *DecryptionResponse) XXX_Size() int {
	return xxx_messageInfo_DecryptionResponse.Size(m)
}
func (m *DecryptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DecryptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DecryptionResponse proto.InternalMessageInfo

func (m *DecryptionResponse) GetPlaintext() []byte {
	if m != nil {
		return m.Plaintext
	}
	return nil
}

type PublicKeyRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicKeyRequest) Reset()         { *m = PublicKeyRequest{} }
func (m *PublicKeyRequest) String() string { return proto.CompactTextString(m) }
func (*PublicKeyRequest) ProtoMessage()    {}
func (*PublicKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_crypt_072e351eb4757ad3, []int{4}
}
func (m *PublicKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicKeyRequest.Unmarshal(m, b)
}
func (m *PublicKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicKeyRequest.Marshal(b, m, deterministic)
}
func (dst *PublicKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicKeyRequest.Merge(dst, src)
}
func (m *PublicKeyRequest) XXX_Size() int {
	return xxx_messageInfo_PublicKeyRequest.Size(m)
}
func (m *PublicKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublicKeyRequest proto.InternalMessageInfo

type PublicKeyResponse struct {
	X                    []byte   `protobuf:"bytes,1,opt,name=X,proto3" json:"X,omitempty"`
	Y                    []byte   `protobuf:"bytes,2,opt,name=Y,proto3" json:"Y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicKeyResponse) Reset()         { *m = PublicKeyResponse{} }
func (m *PublicKeyResponse) String() string { return proto.CompactTextString(m) }
func (*PublicKeyResponse) ProtoMessage()    {}
func (*PublicKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_crypt_072e351eb4757ad3, []int{5}
}
func (m *PublicKeyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicKeyResponse.Unmarshal(m, b)
}
func (m *PublicKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicKeyResponse.Marshal(b, m, deterministic)
}
func (dst *PublicKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicKeyResponse.Merge(dst, src)
}
func (m *PublicKeyResponse) XXX_Size() int {
	return xxx_messageInfo_PublicKeyResponse.Size(m)
}
func (m *PublicKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublicKeyResponse proto.InternalMessageInfo

func (m *PublicKeyResponse) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *PublicKeyResponse) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

func init() {
	proto.RegisterType((*EncryptionRequest)(nil), "crypt.EncryptionRequest")
	proto.RegisterType((*EncryptionResponse)(nil), "crypt.EncryptionResponse")
	proto.RegisterType((*DecryptionRequest)(nil), "crypt.DecryptionRequest")
	proto.RegisterType((*DecryptionResponse)(nil), "crypt.DecryptionResponse")
	proto.RegisterType((*PublicKeyRequest)(nil), "crypt.PublicKeyRequest")
	proto.RegisterType((*PublicKeyResponse)(nil), "crypt.PublicKeyResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CryptServiceClient is the client API for CryptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CryptServiceClient interface {
	Encrypt(ctx context.Context, in *EncryptionRequest, opts ...grpc.CallOption) (*EncryptionResponse, error)
	Decrypt(ctx context.Context, in *DecryptionRequest, opts ...grpc.CallOption) (*DecryptionResponse, error)
	PublicKey(ctx context.Context, in *PublicKeyRequest, opts ...grpc.CallOption) (*PublicKeyResponse, error)
}

type cryptServiceClient struct {
	cc *grpc.ClientConn
}

func NewCryptServiceClient(cc *grpc.ClientConn) CryptServiceClient {
	return &cryptServiceClient{cc}
}

func (c *cryptServiceClient) Encrypt(ctx context.Context, in *EncryptionRequest, opts ...grpc.CallOption) (*EncryptionResponse, error) {
	out := new(EncryptionResponse)
	err := c.cc.Invoke(ctx, "/crypt.CryptService/Encrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptServiceClient) Decrypt(ctx context.Context, in *DecryptionRequest, opts ...grpc.CallOption) (*DecryptionResponse, error) {
	out := new(DecryptionResponse)
	err := c.cc.Invoke(ctx, "/crypt.CryptService/Decrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptServiceClient) PublicKey(ctx context.Context, in *PublicKeyRequest, opts ...grpc.CallOption) (*PublicKeyResponse, error) {
	out := new(PublicKeyResponse)
	err := c.cc.Invoke(ctx, "/crypt.CryptService/PublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptServiceServer is the server API for CryptService service.
type CryptServiceServer interface {
	Encrypt(context.Context, *EncryptionRequest) (*EncryptionResponse, error)
	Decrypt(context.Context, *DecryptionRequest) (*DecryptionResponse, error)
	PublicKey(context.Context, *PublicKeyRequest) (*PublicKeyResponse, error)
}

func RegisterCryptServiceServer(s *grpc.Server, srv CryptServiceServer) {
	s.RegisterService(&_CryptService_serviceDesc, srv)
}

func _CryptService_Encrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptServiceServer).Encrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypt.CryptService/Encrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptServiceServer).Encrypt(ctx, req.(*EncryptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptService_Decrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptServiceServer).Decrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypt.CryptService/Decrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptServiceServer).Decrypt(ctx, req.(*DecryptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptService_PublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptServiceServer).PublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypt.CryptService/PublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptServiceServer).PublicKey(ctx, req.(*PublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CryptService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crypt.CryptService",
	HandlerType: (*CryptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Encrypt",
			Handler:    _CryptService_Encrypt_Handler,
		},
		{
			MethodName: "Decrypt",
			Handler:    _CryptService_Decrypt_Handler,
		},
		{
			MethodName: "PublicKey",
			Handler:    _CryptService_PublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crypt.proto",
}

func init() { proto.RegisterFile("crypt.proto", fileDescriptor_crypt_072e351eb4757ad3) }

var fileDescriptor_crypt_072e351eb4757ad3 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x3f, 0x4b, 0xc3, 0x40,
	0x14, 0xe7, 0x04, 0x1b, 0xfa, 0xcc, 0x60, 0xde, 0xd2, 0x58, 0x44, 0xe4, 0x26, 0xa7, 0x0a, 0xd5,
	0x39, 0x8b, 0xba, 0x58, 0x07, 0xa9, 0x4b, 0x3b, 0x49, 0x1a, 0x1e, 0x78, 0x58, 0x92, 0xf3, 0xee,
	0x2a, 0xde, 0x97, 0xf4, 0x33, 0x49, 0xaf, 0x8f, 0x78, 0x34, 0xd1, 0x6e, 0x79, 0xef, 0xe5, 0xf7,
	0x97, 0x83, 0x93, 0xca, 0x78, 0xed, 0x26, 0xda, 0x34, 0xae, 0xc1, 0xe3, 0x30, 0xc8, 0x47, 0xc8,
	0x1e, 0xea, 0xf0, 0xa9, 0x9a, 0x7a, 0x4e, 0x1f, 0x1b, 0xb2, 0x0e, 0xcf, 0x61, 0xa8, 0xd7, 0xa5,
	0xaa, 0x1d, 0x7d, 0xb9, 0x5c, 0x5c, 0x8a, 0xab, 0x74, 0xfe, 0xbb, 0xc0, 0x11, 0x24, 0x25, 0xd9,
	0xd7, 0x77, 0xf2, 0xf9, 0x51, 0xb8, 0x0d, 0x4a, 0xb2, 0x33, 0xf2, 0xf2, 0x16, 0x30, 0xe6, 0xb2,
	0xba, 0xa9, 0x2d, 0xe1, 0x05, 0x40, 0xa5, 0xf4, 0x1b, 0x99, 0x88, 0x2d, 0xda, 0xc8, 0x27, 0xc8,
	0xee, 0x69, 0xdf, 0xc1, 0x01, 0xd0, 0xdf, 0x1e, 0xa6, 0x80, 0x31, 0x1b, 0x7b, 0xf8, 0x37, 0x90,
	0x44, 0x38, 0x7d, 0xde, 0xac, 0xd6, 0xaa, 0x9a, 0x91, 0x67, 0x03, 0xf2, 0x1a, 0xb2, 0x68, 0xc7,
	0x34, 0x29, 0x88, 0x05, 0xc3, 0xc5, 0x62, 0x3b, 0x2d, 0x59, 0x5d, 0x2c, 0xa7, 0xdf, 0x02, 0xd2,
	0xbb, 0xad, 0xee, 0x0b, 0x99, 0x4f, 0x55, 0x11, 0x16, 0x90, 0x70, 0x1b, 0x98, 0x4f, 0x76, 0xcd,
	0x77, 0x9a, 0x1e, 0x9f, 0xf5, 0x5c, 0x58, 0xac, 0x80, 0x84, 0x93, 0xb4, 0xf8, 0x4e, 0x4f, 0x2d,
	0xbe, 0x27, 0x73, 0x01, 0xc3, 0x36, 0x01, 0x8e, 0xf8, 0xbf, 0xfd, 0x9c, 0xe3, 0xbc, 0x7b, 0xd8,
	0xe1, 0x57, 0x83, 0xf0, 0x4e, 0x6e, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x14, 0xc5, 0xa7,
	0x36, 0x02, 0x00, 0x00,
}
